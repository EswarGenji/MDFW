package com.selenium.reporting;

import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import com.selenium.core.CoreLib;
import com.selenium.global.ConfigDetails;
import com.selenium.global.GlobalVars;

import java.util.Properties;


public class MailReport{
	
	public void sendMailReport(int total, int passed, int failed)
	{
		String configXlsPath="./config.xml";
    	String blockName=ConfigDetails.appName+"_Mail";
    	
    	final String username=CoreLib.fGetNodeText(configXlsPath,blockName,"UserName");
    	final String password=CoreLib.fGetNodeText(configXlsPath,blockName,"Password");
    	String hostName=CoreLib.fGetNodeText(configXlsPath,blockName,"SMTP_HOST_NAME");
    	String portNum=CoreLib.fGetNodeText(configXlsPath,blockName,"SMTP_PORT");
    	String isAuth=CoreLib.fGetNodeText(configXlsPath,blockName,"Authentication");
    	
    	String fromAddress=CoreLib.fGetNodeText(configXlsPath,blockName,"from");
    	String recepient=CoreLib.fGetNodeText(configXlsPath,blockName,"recipients");
    
    	String subject=ConfigDetails.appName+" "+ConfigDetails.release+" Automation Report";
    	String msg="<body><font size=4 color=DarkBlue><title>&nbsp; CAMMIS &nbsp;Execution Summary</title><br/>"
    			+ "<b>Hi All,</b><br/><br/>&nbsp;&nbsp;Please find the Automation execution summary for<em><b>"
    			+ "&nbsp; CAMMIS &nbsp;</b></em><br/><br> &&Counters&& <br> <br/><br/>&nbsp;<b>Note</b>:"
    			+ "This is an automatic  mail generated by Automation Script"
    			+"<br/><br/><div><em>Thank you,<br>Automation team.</br></em></div></font></body>";
    	
    	
    	String countersText = "<table border=3 cellpadding=8>"+
    			"<tr><td><b> Browser Executed		</b></td><td> "+ ConfigDetails.browser + " </td></tr>" +
    			"<tr><td><b> URL					</b></td><td> "+ ConfigDetails.url		 + " </td></tr>" +
    			"<tr><td><b> Total Cases Executed 	</b></td><td>"+total+"</td></tr>" +
    			"<tr><td><b> Total Cases Passed		</b></td><td>"+passed+"</td></tr>" +
    			"<tr><td><b> Total Cases Failed		</b></td><td>"+failed+"</td></tr>" + 
    			"<tr><td><b> Total Cases Skipped		</b></td><td>"+(total-(passed+failed))+"</td></tr>" + "</table> ";
    	
    	String mailBody = msg.replace("&&Counters&&",countersText);
    			
    
    	
    	CoreLib.LOGGER.info(" User Name       ::"+hostName);
    	CoreLib.LOGGER.info(" Password        ::"+password);
    	CoreLib.LOGGER.info(" SMTP Host Name  ::"+hostName);
    	CoreLib.LOGGER.info(" Port Number     ::"+portNum);
    	CoreLib.LOGGER.info(" Authentication  ::"+isAuth);
    	
    	CoreLib.LOGGER.info("From Address     ::"+fromAddress);
    	CoreLib.LOGGER.info("To Address       ::"+recepient);
    	CoreLib.LOGGER.info("Mail Subject     ::"+subject);
    	CoreLib.LOGGER.info("Mail Body        ::"+msg);
    	
        Properties props = new Properties();
        props.put("mail.smtp.host",hostName);
        props.put("mail.smtp.socketFactory.port",portNum);
        props.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");
        props.put("mail.smtp.auth",isAuth);
        props.put("mail.smtp.port",portNum);

        Session session=null;
        if(isAuth.equalsIgnoreCase("True"))
        {
        	 session = Session.getDefaultInstance(props,
                     new javax.mail.Authenticator() {
                         protected PasswordAuthentication getPasswordAuthentication() {
                             return new PasswordAuthentication(username,password);
                         }
                     });	
        }
        else
        	session = Session.getDefaultInstance(props, null);

        try {

            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(fromAddress));
           
        	String[] recipients = recepient.split(";");
    		InternetAddress[] addressTo =new InternetAddress[recipients.length];
    		for (int i = 0; i < recipients.length; i++)
    		{
    			addressTo[i] = new InternetAddress(recipients[i]);
    		} 
            message.setRecipients(Message.RecipientType.TO, addressTo);
            
     
            
            
            MimeBodyPart messageBodyPart = new MimeBodyPart();
            messageBodyPart.setContent(mailBody, "text/html");
     
          
            Multipart multipart = new MimeMultipart();
            multipart.addBodyPart(messageBodyPart);
     
            String[] attachFiles = new String[2];
            attachFiles[0]=GlobalVars.testHTMLResultPath;
            attachFiles[1]=GlobalVars.TestResultsPath;
            
            
            // adds attachments
            if (attachFiles != null && attachFiles.length > 0) {
                for (String filePath : attachFiles) {
                    MimeBodyPart attachPart = new MimeBodyPart();
                    attachPart.attachFile(filePath);
                    multipart.addBodyPart(attachPart);
                }
            }
            
            
            message.setSubject(subject);
            message.setContent(multipart);
            Transport.send(message);

            System.out.println("Mail sent succesfully!");

        } catch (Exception e) {
           
        	e.printStackTrace();
            System.out.println("Error occured while sending mail... ::"+e.getMessage());
            
        }
	}
	  
}
